x = 5
sum(a, b) = a + b
m = new int[10]
for i in 0..9
 m[i] <- i + 1
end
bs = new byte[10]
bs <- m
iter(f, seq) =  for i in seq
  f(i)
 end
fold(f, v0, seq) = {
 t = v0
 for x in seq
  t <- f(t, x)
 end
 t
}
printer(x) =  print(x)
iter(printer, m)
iter(printer, bs)
iter(printer, 5..15)
print(fold(sum, 0, m))
add = (x) => (y) => x + y
print(add(2, 3))
five = add(2, 3)
print(add(five, five))
map(f, m) = {
 r = new int[|m|]
 for i in 0..|m| - 1
  r[i] <- f(m[i])
 end
 r
}
adder = (y) => 5 + y
a = map(adder, m)
big = if 5 < five then 1 else 0
for i in a
 if 4 < i then   print(i) 
end
fib(n) = {
 print(n)
 if n < 2 then 1 else fib(n - 1) + fib(n - 2)
}
print(fib(five))
printall(xs, i) = if i < |xs| then {
 print(xs[i])
 printall(xs, i + 1)
} 
printall(m, 0)
printall(bs, 0)
showhead(xs) =  print(xs.head)
showhead(m)
showhead(bs)
showhead(2..5)
showall(xs) = if 0 < |xs| then {
 print(xs.head)
 showall(xs.tail)
} 
m2 = m
showall(m)
showall(bs)
showall(2..5)
showall(m[5..7])
m[3..6] <- a


x = 5
m = new int[10]
for i in 0..9
 m[i] <- i + 1
end
bs = new byte[10]
bs <- m
   for i in m
            print(i)
  end
   for i in bs
            print(i)
  end
   for i in 5..15
            print(i)
  end
print( {
  t_7 = 0
  for x in m
   t_7 <-     t_7 + x
  end
  t_7
 })
print( 2 + 3)
five =  2 + 3
print( five + five)
a =  {
  r_12 = new int[|m|]
  for i in 0..|m| - 1
   r_12[i] <- {
    y_13 = m[i]
    5 + y_13
   }
  end
  r_12
 }
big = if 5 < five then 1 else 0
for i in a
 if 4 < i then   print(i) 
end
fib(n) = {
 print(n)
 if n < 2 then 1 else fib(n - 1) + fib(n - 2)
}
print(fib(five))
printall(xs, i) = if i < |xs| then {
 print(xs[i])
 printall(xs, i + 1)
} 
printall(m, 0)
printall(bs, 0)
   print(m.head)
   print(bs.head)
   print(2..5.head)
showall(xs) = if 0 < |xs| then {
 print(xs.head)
 showall(xs.tail)
} 
m2 = m
showall(m)
showall(bs)
showall(2..5)
showall(m[5..7])
m[3..6] <- a


# x : int
# m : int array
# i : int
# bs : byte array
# i_21 : byte
# j_21 : int
# i : int
# i : byte
# i : int
# t_7 : int
# x : int
# five : int
# r_12 : int array
# i : int
# y_13 : int
# a : int array
# big : int
# i : int
# n : int
# xs : int array
# i : int
# xs : byte array
# i : int
# m2 : int array
# xs : int array
# xs : byte array
# xs : range
# i_44 : int
# j_44 : int
var x
x <- 5
var array_17
array_17 <- new [10 * 4]
var m
m <- array_17
{
 var i_18
 var i_end18
 i_18 <- 0
 i_end18 <- 9 + 1
 while i_18 < i_end18 {
  {
   var pnt_19
   pnt_19 <- m + i_18 * 4
   *pnt_19 <- i_18 + 1
  }
  i_18 <- i_18 + 1
 }
}
var array_20
array_20 <- new [10]
var bs
bs <- array_20
{
 var i_21_22
 var i_21_end22
 var j_21_22
 var j_21_end22
 i_21_22 <- bs
 i_21_end22 <- bs + 10
 j_21_22 <- m
 j_21_end22 <- m + 10 * 4
 while i_21_22 < i_21_end22 && j_21_22 < j_21_end22 {
  *i_21_22 <-b- *j_21_22
  i_21_22 <- i_21_22 + 1
  j_21_22 <- j_21_22 + 4
 }
}
{
 var i_23
 var i_end23
 i_23 <- m
 i_end23 <- m + 10 * 4
 while i_23 < i_end23 {
  print(*i_23)
  i_23 <- i_23 + 4
 }
}
{
 var i_24
 var i_end24
 i_24 <- bs
 i_end24 <- bs + 10
 while i_24 < i_end24 {
  print(byte(*i_24))
  i_24 <- i_24 + 1
 }
}
{
 var i_25
 var i_end25
 i_25 <- 5
 i_end25 <- 15 + 1
 while i_25 < i_end25 {
  print(i_25)
  i_25 <- i_25 + 1
 }
}
var t_7
t_7 <- 0
{
 var x_26
 var x_end26
 x_26 <- m
 x_end26 <- m + 10 * 4
 while x_26 < x_end26 {
  t_7 <- t_7 + *x_26
  x_26 <- x_26 + 4
 }
}
print(t_7)
print(2 + 3)
var five
five <- 2 + 3
print(five + five)
var array_27
array_27 <- new [10 * 4]
var r_12
r_12 <- array_27
{
 var i_28
 var i_end28
 i_28 <- 0
 i_end28 <- 10 - 1 + 1
 while i_28 < i_end28 {
  var y_13
  y_13 <- $Mem[m + i_28 * 4]
  {
   var pnt_29
   pnt_29 <- r_12 + i_28 * 4
   *pnt_29 <- 5 + y_13
  }
  i_28 <- i_28 + 1
 }
}
var a
a <- r_12
var big
if 5 < five {
 big <- 1
} else {
 big <- 0
}
{
 var i_30
 var i_end30
 i_30 <- a
 i_end30 <- a + 10 * 4
 while i_30 < i_end30 {
  if 4 < *i_30 {
   print(*i_30)
  } else {

  }
  i_30 <- i_30 + 4
 }
}
fun fib_31(n)
{
 print(n)
 if n < 2 {
  return 1
 } else {
  return fib_31(n - 1) + fib_31(n - 2)
 }
}
print(fib_31(five))
fun printall_33(xs, xs_len, i)
{
 if i < xs_len {
  print(byte($Mem[xs + i]))
  return printall_33(xs, xs_len, i + 1)
 } else {

 }
}
fun printall_32(xs, xs_len, i)
{
 if i < xs_len {
  print($Mem[xs + i * 4])
  return printall_32(xs, xs_len, i + 1)
 } else {

 }
}
printall_32(m, 10, 0)
printall_33(bs, 10, 0)
print(*m)
print(byte(*bs))
print(2)
fun showall_40(xs, xs_end)
{
 if 0 < xs_end - xs + 1 {
  print(xs)
  var bound_42
  bound_42 <- xs + 1
  return showall_40(bound_42, xs_end)
 } else {

 }
}
fun showall_37(xs, xs_len)
{
 if 0 < xs_len {
  print(byte(*xs))
  var arr_len_39
  arr_len_39 <- xs_len - 1
  return showall_37(xs + 1, arr_len_39)
 } else {

 }
}
fun showall_34(xs, xs_len)
{
 if 0 < xs_len {
  print(*xs)
  var arr_len_36
  arr_len_36 <- xs_len - 1
  return showall_34(xs + 4, arr_len_36)
 } else {

 }
}
var m2
m2 <- m
showall_34(m, 10)
showall_37(bs, 10)
showall_40(2, 5)
var arr_len_43
arr_len_43 <- 7 - 5 + 1
showall_34(m + 5 * 4, arr_len_43)
{
 var i_44_45
 var i_44_end45
 var j_44_45
 var j_44_end45
 i_44_45 <- 3
 i_44_end45 <- 6 + 1
 j_44_45 <- a
 j_44_end45 <- a + 10 * 4
 while i_44_45 < i_44_end45 && j_44_45 < j_44_end45 {
  {
   var pnt_46
   pnt_46 <- m + i_44_45 * 4
   *pnt_46 <- *j_44_45
  }
  i_44_45 <- i_44_45 + 1
  j_44_45 <- j_44_45 + 4
 }
}


MOV|RVR, 0, 5,
MUL|RVV, 2, 10, 4,
NEW|RRR, 1, 2,
MOV|RRR, 2, 1,
MOV|RVR, 3, 0,
ADD|RVV, 4, 9, 1,
//20, while_52:
JMPLE|RRR, 26, 3, 4, //then_54
JMP, 44, //endif_54
//26, then_54:
MUL|RRV, 6, 3, 4,
ADD|RRR, 5, 2, 6,
ADD|PRV, 5, 3, 1,
ADD|RRV, 3, 3, 1,
JMP, 20, //while_52
//44, endif_54:
//44, endloop_53:
NEW|RVR, 3, 10,
MOV|RRR, 4, 3,
MOV|RRR, 5, 4,
ADD|RRV, 6, 4, 10,
MOV|RRR, 7, 2,
MUL|RVV, 9, 10, 4,
ADD|RRR, 8, 2, 9,
//68, while_55:
JMPLE|RRR, 74, 5, 6, //then_59
JMP, 93, //endif_58
//74, then_59:
JMPLE|RRR, 80, 7, 8, //then_58
//78, else_57:
JMP, 93, //endif_58
//80, then_58:
MOVB|PPR, 5, 7,
ADD|RRV, 5, 5, 1,
ADD|RRV, 7, 7, 4,
JMP, 68, //while_55
//93, endif_58:
//93, endif_59:
//93, endloop_56:
MOV|RRR, 5, 2,
MUL|RVV, 7, 10, 4,
ADD|RRR, 6, 2, 7,
//104, while_60:
JMPLE|RRR, 110, 5, 6, //then_62
JMP, 119, //endif_62
//110, then_62:
PRINT|RPR, 0, 5,
ADD|RRV, 5, 5, 4,
JMP, 104, //while_60
//119, endif_62:
//119, endloop_61:
MOV|RRR, 5, 4,
ADD|RRV, 6, 4, 10,
//126, while_63:
JMPLE|RRR, 132, 5, 6, //then_65
JMP, 147, //endif_65
//132, then_65:
MOV|RVR, 7, 0,
MOVB|RPR, 7, 5,
PRINT|RRR, 0, 7,
ADD|RRV, 5, 5, 1,
JMP, 126, //while_63
//147, endif_65:
//147, endloop_64:
MOV|RVR, 5, 5,
ADD|RVV, 6, 15, 1,
//154, while_66:
JMPLE|RRR, 160, 5, 6, //then_68
JMP, 169, //endif_68
//160, then_68:
PRINT|RRR, 0, 5,
ADD|RRV, 5, 5, 1,
JMP, 154, //while_66
//169, endif_68:
//169, endloop_67:
MOV|RVR, 5, 0,
MOV|RRR, 6, 2,
MUL|RVV, 8, 10, 4,
ADD|RRR, 7, 2, 8,
//183, while_69:
JMPLE|RRR, 189, 6, 7, //then_71
JMP, 199, //endif_71
//189, then_71:
ADD|RRP, 5, 5, 6,
ADD|RRV, 6, 6, 4,
JMP, 183, //while_69
//199, endif_71:
//199, endloop_70:
PRINT|RRR, 0, 5,
ADD|RVV, 6, 2, 3,
PRINT|RRR, 0, 6,
ADD|RVV, 6, 2, 3,
ADD|RRR, 7, 6, 6,
PRINT|RRR, 0, 7,
MUL|RVV, 8, 10, 4,
NEW|RRR, 7, 8,
MOV|RRR, 8, 7,
MOV|RVR, 9, 0,
SUB|RVV, 11, 10, 1,
ADD|RRV, 10, 11, 1,
//241, while_72:
JMPLE|RRR, 247, 9, 10, //then_74
JMP, 276, //endif_74
//247, then_74:
MUL|RRV, 12, 9, 4,
ADD|RRR, 12, 2, 12,
MOV|RPR, 11, 12,
MUL|RRV, 13, 9, 4,
ADD|RRR, 12, 8, 13,
ADD|PVR, 12, 5, 11,
ADD|RRV, 9, 9, 1,
JMP, 241, //while_72
//276, endif_74:
//276, endloop_73:
MOV|RRR, 9, 8,
JMPLE|RVR, 288, 5, 6, //then_75
MOV|RVR, 10, 0,
JMP, 291, //endif_75
//288, then_75:
MOV|RVR, 10, 1,
//291, endif_75:
MOV|RRR, 11, 9,
MUL|RVV, 13, 10, 4,
ADD|RRR, 12, 9, 13,
//302, while_76:
JMPLE|RRR, 308, 11, 12, //then_79
JMP, 362, //endproc_80
//308, then_79:
JMPLE|RVP, 314, 4, 11, //then_78
JMP, 317, //endif_78
//314, then_78:
PRINT|RPR, 0, 11,
//317, endif_78:
ADD|RRV, 11, 11, 4,
JMP, 302, //while_76
//323, fib_31:
PRINT|RRR, 0, -1,
JMPLE|RRV, 358, -1, 2, //then_81
SUB|RRV, 1, -1, 1,
MOV|RRR, 2, 1,
CALL|RVR, 323, 3, //fib_31
SUB|RRV, 1, -1, 2,
MOV|RRR, 3, 1,
CALL|RVR, 323, 4, //fib_31
ADD|RRR, 0, 2, 3,
MOV|RRR, -1, 0,
RET,
//358, then_81:
MOV|RVR, -1, 1,
RET,
//362, endproc_80:
MOV|RRR, 11, 6,
CALL|RVR, 323, 12, //fib_31
PRINT|RRR, 0, 11,
JMP, 429, //endproc_84
//373, printall_33:
JMPLE|RRR, 379, -1, -2, //then_83
JMP, 401, //endif_83
//379, then_83:
ADD|RRR, 1, -3, -1,
MOV|RVR, 0, 0,
MOVB|RPR, 0, 1,
PRINT|RRR, 0, 0,
ADD|RRV, 0, -1, 1,
MOV|RRR, -1, 0,
JMP, 373, //printall_33
//401, endif_83:
RET,
//402, printall_32:
JMPLE|RRR, 408, -1, -2, //then_85
JMP, 428, //endif_85
//408, then_85:
MUL|RRV, 0, -1, 4,
ADD|RRR, 0, -3, 0,
PRINT|RPR, 0, 0,
ADD|RRV, 0, -1, 1,
MOV|RRR, -1, 0,
JMP, 402, //printall_32
//428, endif_85:
RET,
//429, endproc_84:
MOV|RRR, 11, 2,
MOV|RVR, 12, 10,
MOV|RVR, 13, 0,
CALL|RVR, 402, 14, //printall_32
MOV|RRR, 11, 4,
MOV|RVR, 12, 10,
MOV|RVR, 13, 0,
CALL|RVR, 373, 14, //printall_33
PRINT|RPR, 0, 2,
MOV|RVR, 11, 0,
MOVB|RPR, 11, 4,
PRINT|RRR, 0, 11,
PRINT|RVR, 0, 2,
JMP, 555, //endproc_90
//470, showall_40:
SUB|RRR, 0, -1, -2,
ADD|RRV, 0, 0, 1,
JMPLE|RVR, 484, 0, 0, //then_87
JMP, 496, //endif_87
//484, then_87:
PRINT|RRR, 0, -2,
ADD|RRV, 0, -2, 1,
MOV|RRR, -2, 0,
JMP, 470, //showall_40
//496, endif_87:
RET,
//497, showall_37:
JMPLE|RVR, 503, 0, -1, //then_89
JMP, 528, //endif_89
//503, then_89:
MOV|RVR, 0, 0,
MOVB|RPR, 0, -2,
PRINT|RRR, 0, 0,
SUB|RRV, 0, -1, 1,
ADD|RRV, 1, -2, 1,
MOV|RRR, -2, 1,
MOV|RRR, -1, 0,
JMP, 497, //showall_37
//528, endif_89:
RET,
//529, showall_34:
JMPLE|RVR, 535, 0, -1, //then_91
JMP, 554, //endif_91
//535, then_91:
PRINT|RPR, 0, -2,
SUB|RRV, 0, -1, 1,
ADD|RRV, 1, -2, 4,
MOV|RRR, -2, 1,
MOV|RRR, -1, 0,
JMP, 529, //showall_34
//554, endif_91:
RET,
//555, endproc_90:
MOV|RRR, 11, 2,
MOV|RRR, 12, 2,
MOV|RVR, 13, 10,
CALL|RVR, 529, 14, //showall_34
MOV|RRR, 12, 4,
MOV|RVR, 13, 10,
CALL|RVR, 497, 14, //showall_37
MOV|RVR, 12, 2,
MOV|RVR, 13, 5,
CALL|RVR, 470, 14, //showall_40
SUB|RVV, 13, 7, 5,
ADD|RRV, 12, 13, 1,
MUL|RVV, 13, 5, 4,
ADD|RRR, 13, 2, 13,
MOV|RRR, 14, 13,
MOV|RRR, 15, 12,
CALL|RVR, 529, 16, //showall_34
MOV|RVR, 13, 3,
ADD|RVV, 14, 6, 1,
MOV|RRR, 15, 9,
MUL|RVV, 17, 10, 4,
ADD|RRR, 16, 9, 17,
//628, while_92:
JMPLE|RRR, 634, 13, 14, //then_96
JMP, 661, //endif_95
//634, then_96:
JMPLE|RRR, 640, 15, 16, //then_95
//638, else_94:
JMP, 661, //endif_95
//640, then_95:
MUL|RRV, 18, 13, 4,
ADD|RRR, 17, 2, 18,
MOV|PPR, 17, 15,
ADD|RRV, 13, 13, 1,
ADD|RRV, 15, 15, 4,
JMP, 628, //while_92
//661, endif_95:
//661, endif_96:
//661, endloop_93:
