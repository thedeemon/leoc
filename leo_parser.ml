type token =
  | Leol
  | Leof
  | Lpipe
  | Lcolon
  | Lsemi
  | Lquestion
  | Lasgn
  | Lmod
  | Lplus
  | Lminus
  | Lmul
  | Ldiv
  | Lxor
  | Llt
  | Lgt
  | Lleq
  | Lgeq
  | Leq
  | Lneq
  | Llparen
  | Lrparen
  | Land
  | Lor
  | Ldot2
  | Lcomma
  | Llcurly
  | Lrcurly
  | Lrem
  | Lwrite
  | Lfollow
  | Lbackslash
  | Llbracket
  | Lrbracket
  | Ldo
  | Lend
  | Lfor
  | Lin
  | Lif
  | Lthen
  | Lelse
  | Lreturn
  | Lhead
  | Ltail
  | Lbyte
  | Ltint
  | Lnew
  | Lint of (int)
  | Lident of (string)

open Parsing;;
# 2 "leo_parser.mly"
open ExtLib;;
open Commons;;

let parse_error s =
  Printf.eprintf "Parse error: %s\n" s;
  flush stderr;; 

# 61 "leo_parser.ml"
let yytransl_const = [|
  257 (* Leol *);
  258 (* Leof *);
  259 (* Lpipe *);
  260 (* Lcolon *);
  261 (* Lsemi *);
  262 (* Lquestion *);
  263 (* Lasgn *);
  264 (* Lmod *);
  265 (* Lplus *);
  266 (* Lminus *);
  267 (* Lmul *);
  268 (* Ldiv *);
  269 (* Lxor *);
  270 (* Llt *);
  271 (* Lgt *);
  272 (* Lleq *);
  273 (* Lgeq *);
  274 (* Leq *);
  275 (* Lneq *);
  276 (* Llparen *);
  277 (* Lrparen *);
  278 (* Land *);
  279 (* Lor *);
  280 (* Ldot2 *);
  281 (* Lcomma *);
  282 (* Llcurly *);
  283 (* Lrcurly *);
  284 (* Lrem *);
  285 (* Lwrite *);
  286 (* Lfollow *);
  287 (* Lbackslash *);
  288 (* Llbracket *);
  289 (* Lrbracket *);
  290 (* Ldo *);
  291 (* Lend *);
  292 (* Lfor *);
  293 (* Lin *);
  294 (* Lif *);
  295 (* Lthen *);
  296 (* Lelse *);
  297 (* Lreturn *);
  298 (* Lhead *);
  299 (* Ltail *);
  300 (* Lbyte *);
  301 (* Ltint *);
  302 (* Lnew *);
    0|]

let yytransl_block = [|
  303 (* Lint *);
  304 (* Lident *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\006\000\006\000\010\000\010\000\008\000\008\000\008\000\009\000\
\009\000\012\000\011\000\011\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\013\000\013\000\013\000\013\000\013\000\013\000\
\016\000\016\000\016\000\014\000\014\000\015\000\015\000\018\000\
\018\000\020\000\020\000\019\000\019\000\005\000\005\000\003\000\
\003\000\000\000"

let yylen = "\002\000\
\003\000\001\000\003\000\004\000\003\000\006\000\002\000\001\000\
\000\000\003\000\001\000\003\000\001\000\004\000\004\000\001\000\
\003\000\003\000\001\000\003\000\001\000\001\000\005\000\005\000\
\005\000\004\000\004\000\004\000\003\000\002\000\002\000\001\000\
\005\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\000\000\001\000\003\000\001\000\001\000\000\000\002\000\001\000\
\001\000\001\000\001\000\001\000\002\000\001\000\002\000\000\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\066\000\000\000\002\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\060\000\
\058\000\000\000\000\000\000\000\059\000\062\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\056\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\031\000\
\000\000\000\000\000\000\029\000\042\000\061\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\018\000\017\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\010\000\026\000\000\000\
\000\000\000\000\000\000\027\000\028\000\025\000\024\000\000\000\
\000\000\023\000\033\000\051\000\000\000\006\000\000\000"

let yydgoto = "\002\000\
\014\000\015\000\027\000\016\000\047\000\045\000\017\000\018\000\
\035\000\032\000\087\000\036\000\038\000\078\000\130\000\084\000\
\019\000\042\000\029\000\030\000"

let yysindex = "\012\000\
\200\001\000\000\021\002\021\002\114\001\229\254\114\001\231\254\
\021\002\021\002\230\254\000\000\002\255\000\000\114\001\000\000\
\055\003\000\255\000\000\044\255\190\002\055\003\014\255\000\000\
\000\000\052\255\200\001\114\001\000\000\000\000\035\255\031\255\
\200\001\030\255\077\001\000\000\198\002\003\255\055\003\000\000\
\000\000\060\255\040\002\059\002\076\255\094\255\181\001\021\002\
\021\002\021\002\021\002\021\002\021\002\021\002\000\000\000\000\
\021\002\021\002\059\002\000\000\000\000\000\000\114\001\000\000\
\229\254\021\002\114\001\059\002\231\254\200\001\021\002\021\002\
\021\002\021\002\021\002\021\002\000\000\021\002\000\000\021\002\
\248\254\134\002\080\255\092\255\044\255\215\002\096\255\021\002\
\000\000\000\000\251\254\157\001\157\001\251\254\251\254\055\003\
\097\003\055\003\241\002\101\255\100\255\000\000\055\003\106\255\
\061\003\000\000\000\000\114\001\055\003\055\003\055\003\055\003\
\000\000\120\255\251\002\012\003\021\002\000\000\000\000\021\002\
\000\000\000\000\055\003\000\000\000\000\000\000\000\000\114\255\
\021\002\000\000\000\000\000\000\097\003\000\000\055\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\229\001\000\000\229\001\000\000\
\000\000\000\000\000\000\000\000\090\002\000\000\149\255\000\000\
\030\002\000\000\000\000\097\255\000\000\000\000\078\003\000\000\
\000\000\000\000\000\000\248\001\000\000\000\000\053\255\000\000\
\000\000\000\000\229\001\000\000\000\000\000\000\048\002\000\000\
\000\000\000\000\131\255\000\000\000\000\000\000\001\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\255\000\000\000\000\000\000\000\000\134\255\000\000\
\000\000\000\000\123\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\003\141\255\000\000\000\000\113\001\000\000\000\000\000\000\
\000\000\000\000\145\255\033\000\081\000\193\255\241\255\129\000\
\177\000\121\002\000\000\000\000\000\000\000\000\225\000\000\000\
\000\000\000\000\000\000\123\255\056\255\058\255\065\255\106\001\
\000\000\004\255\065\001\000\000\131\255\000\000\000\000\000\000\
\126\002\162\002\091\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\147\001\000\000\017\001"

let yygindex = "\000\000\
\000\000\238\255\251\255\127\000\009\000\000\000\253\255\000\000\
\000\000\224\255\023\000\106\000\014\000\000\000\000\000\060\000\
\178\000\000\000\149\000\248\255"

let yytablesize = 1164
let yytable = "\021\000\
\022\000\033\000\065\000\024\000\048\000\037\000\039\000\053\000\
\063\000\046\000\083\000\058\000\001\000\028\000\067\000\028\000\
\065\000\040\000\041\000\064\000\031\000\043\000\034\000\059\000\
\075\000\076\000\048\000\065\000\057\000\070\000\026\000\048\000\
\102\000\044\000\061\000\065\000\055\000\056\000\064\000\082\000\
\086\000\077\000\048\000\028\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\108\000\062\000\098\000\082\000\099\000\
\043\000\101\000\044\000\065\000\066\000\104\000\103\000\058\000\
\105\000\045\000\068\000\109\000\110\000\111\000\112\000\037\000\
\037\000\011\000\115\000\059\000\116\000\043\000\043\000\044\000\
\044\000\100\000\011\000\043\000\123\000\044\000\045\000\045\000\
\113\000\114\000\106\000\080\000\045\000\088\000\043\000\089\000\
\044\000\022\000\022\000\022\000\118\000\022\000\128\000\045\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\119\000\082\000\022\000\022\000\133\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\135\000\126\000\022\000\
\122\000\022\000\022\000\022\000\022\000\125\000\022\000\022\000\
\022\000\022\000\022\000\022\000\127\000\075\000\022\000\022\000\
\022\000\039\000\039\000\039\000\134\000\039\000\064\000\049\000\
\039\000\039\000\039\000\039\000\039\000\064\000\039\000\039\000\
\064\000\050\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\090\000\107\000\039\000\
\132\000\039\000\039\000\039\000\039\000\023\000\039\000\039\000\
\039\000\039\000\079\000\000\000\000\000\000\000\039\000\039\000\
\039\000\037\000\037\000\037\000\000\000\037\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\000\000\037\000\037\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\037\000\
\000\000\037\000\037\000\037\000\037\000\000\000\037\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\037\000\037\000\
\037\000\038\000\038\000\038\000\000\000\038\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\
\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\000\000\038\000\
\000\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\
\038\000\038\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\035\000\035\000\035\000\000\000\035\000\000\000\000\000\
\000\000\035\000\035\000\000\000\000\000\000\000\035\000\035\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\035\000\
\000\000\035\000\035\000\035\000\035\000\000\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\035\000\035\000\
\035\000\036\000\036\000\036\000\000\000\036\000\000\000\000\000\
\000\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\000\000\000\000\036\000\
\000\000\036\000\036\000\036\000\036\000\000\000\036\000\036\000\
\036\000\036\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\040\000\040\000\040\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\040\000\040\000\040\000\000\000\000\000\040\000\
\000\000\040\000\040\000\040\000\040\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\041\000\041\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\041\000\041\000\041\000\041\000\000\000\000\000\041\000\
\000\000\041\000\041\000\041\000\041\000\000\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\034\000\034\000\034\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\034\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\000\000\034\000\034\000\034\000\034\000\000\000\000\000\034\000\
\000\000\034\000\034\000\034\000\034\000\000\000\034\000\034\000\
\034\000\034\000\000\000\000\000\000\000\000\000\034\000\034\000\
\034\000\055\000\055\000\055\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\055\000\
\000\000\000\000\055\000\055\000\055\000\055\000\055\000\055\000\
\000\000\055\000\055\000\055\000\055\000\000\000\000\000\055\000\
\000\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\
\055\000\055\000\000\000\000\000\000\000\000\000\055\000\055\000\
\055\000\054\000\054\000\054\000\000\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\054\000\054\000\
\000\000\025\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\054\000\054\000\000\000\000\000\054\000\
\000\000\054\000\054\000\054\000\054\000\069\000\054\000\054\000\
\026\000\054\000\046\000\000\000\000\000\000\000\054\000\054\000\
\054\000\019\000\024\000\019\000\000\000\019\000\025\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\046\000\
\046\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\022\000\019\000\019\000\000\000\019\000\026\000\000\000\019\000\
\046\000\019\000\019\000\020\000\019\000\020\000\019\000\020\000\
\000\000\019\000\022\000\022\000\000\000\000\000\019\000\019\000\
\019\000\000\000\000\000\000\000\048\000\000\000\020\000\051\000\
\052\000\053\000\000\000\020\000\020\000\000\000\020\000\000\000\
\000\000\020\000\000\000\020\000\020\000\024\000\020\000\003\000\
\020\000\025\000\000\000\020\000\000\000\000\000\000\000\000\000\
\020\000\020\000\020\000\000\000\000\000\000\000\055\000\056\000\
\004\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\
\026\000\000\000\000\000\006\000\000\000\000\000\007\000\000\000\
\008\000\000\000\009\000\004\000\000\000\010\000\000\000\000\000\
\000\000\005\000\011\000\012\000\013\000\000\000\006\000\064\000\
\000\000\007\000\000\000\008\000\000\000\009\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\011\000\012\000\013\000\
\064\000\000\000\065\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\064\000\000\000\
\064\000\000\000\064\000\065\000\000\000\064\000\000\000\000\000\
\000\000\065\000\064\000\064\000\064\000\000\000\065\000\003\000\
\000\000\065\000\000\000\065\000\000\000\065\000\008\000\008\000\
\065\000\000\000\008\000\000\000\000\000\065\000\065\000\065\000\
\004\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\
\007\000\007\000\000\000\006\000\007\000\000\000\007\000\000\000\
\008\000\008\000\009\000\004\000\000\000\003\000\000\000\000\000\
\008\000\005\000\011\000\012\000\020\000\000\000\006\000\000\000\
\000\000\007\000\007\000\007\000\000\000\009\000\004\000\000\000\
\000\000\000\000\007\000\000\000\005\000\011\000\012\000\081\000\
\000\000\006\000\022\000\022\000\007\000\000\000\022\000\000\000\
\009\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\011\000\012\000\085\000\009\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\022\000\022\000\013\000\000\000\
\000\000\005\000\005\000\000\000\022\000\005\000\027\000\027\000\
\000\000\000\000\027\000\022\000\022\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\005\000\005\000\027\000\000\000\000\000\
\027\000\027\000\014\000\005\000\000\000\054\000\117\000\000\000\
\027\000\000\000\028\000\028\000\000\000\000\000\028\000\027\000\
\027\000\028\000\028\000\028\000\028\000\028\000\028\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\028\000\028\000\015\000\000\000\
\060\000\000\000\000\000\000\000\028\000\048\000\049\000\050\000\
\051\000\052\000\053\000\028\000\028\000\048\000\049\000\050\000\
\051\000\052\000\053\000\071\000\072\000\054\000\000\000\073\000\
\074\000\000\000\000\000\000\000\000\000\054\000\048\000\049\000\
\050\000\051\000\052\000\053\000\000\000\000\000\000\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\120\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\121\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\055\000\056\000\048\000\049\000\050\000\051\000\052\000\053\000\
\120\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\124\000\054\000\048\000\049\000\050\000\051\000\052\000\
\053\000\000\000\055\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\054\000\055\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\000\000\055\000\056\000\000\000\
\000\000\000\000\011\000\000\000\000\000\022\000\048\000\049\000\
\050\000\051\000\052\000\053\000\048\000\049\000\050\000\051\000\
\052\000\053\000\000\000\000\000\000\000\000\000\054\000\022\000\
\022\000\000\000\000\000\000\000\120\000\032\000\032\000\032\000\
\032\000\032\000\032\000\004\000\004\000\000\000\000\000\004\000\
\055\000\056\000\000\000\000\000\000\000\032\000\055\000\056\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\004\000\032\000\
\032\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\056\000"

let yycheck = "\003\000\
\004\000\007\000\002\001\001\001\001\001\009\000\010\000\013\001\
\027\000\015\000\043\000\020\001\001\000\005\000\033\000\007\000\
\025\001\044\001\045\001\028\000\048\001\020\001\048\001\032\001\
\022\001\023\001\023\001\027\001\029\001\035\000\028\001\028\001\
\065\000\032\001\021\001\035\001\042\001\043\001\047\000\043\000\
\044\000\039\001\039\001\035\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\070\000\001\001\057\000\058\000\059\000\
\001\001\063\000\001\001\025\001\030\001\067\000\066\000\020\001\
\068\000\001\001\037\001\071\000\072\000\073\000\074\000\075\000\
\076\000\021\001\078\000\032\001\080\000\022\001\023\001\022\001\
\023\001\059\000\030\001\028\001\088\000\028\001\022\001\023\001\
\075\000\076\000\068\000\032\001\028\001\018\001\039\001\002\001\
\039\001\001\001\002\001\003\001\021\001\005\001\108\000\039\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\021\001\117\000\018\001\019\001\120\000\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\129\000\027\001\031\001\
\033\001\033\001\034\001\035\001\036\001\033\001\038\001\039\001\
\040\001\041\001\042\001\043\001\035\001\022\001\046\001\047\001\
\048\001\001\001\002\001\003\001\035\001\005\001\002\001\021\001\
\008\001\009\001\010\001\011\001\012\001\035\001\014\001\015\001\
\027\001\021\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\047\000\069\000\031\001\
\117\000\033\001\034\001\035\001\036\001\004\000\038\001\039\001\
\040\001\041\001\038\000\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\014\001\015\001\
\255\255\005\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\025\001\038\001\039\001\
\028\001\041\001\001\001\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\001\001\003\001\255\255\005\001\005\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\028\001\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\028\001\255\255\031\001\
\039\001\033\001\034\001\001\001\036\001\003\001\038\001\005\001\
\255\255\041\001\042\001\043\001\255\255\255\255\046\001\047\001\
\048\001\255\255\255\255\255\255\008\001\255\255\020\001\011\001\
\012\001\013\001\255\255\025\001\026\001\255\255\028\001\255\255\
\255\255\031\001\255\255\033\001\034\001\001\001\036\001\003\001\
\038\001\005\001\255\255\041\001\255\255\255\255\255\255\255\255\
\046\001\047\001\048\001\255\255\255\255\255\255\042\001\043\001\
\020\001\255\255\003\001\255\255\255\255\255\255\026\001\255\255\
\028\001\255\255\255\255\031\001\255\255\255\255\034\001\255\255\
\036\001\255\255\038\001\020\001\255\255\041\001\255\255\255\255\
\255\255\026\001\046\001\047\001\048\001\255\255\031\001\003\001\
\255\255\034\001\255\255\036\001\255\255\038\001\255\255\255\255\
\041\001\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\020\001\255\255\003\001\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\255\255\034\001\255\255\
\036\001\255\255\038\001\020\001\255\255\041\001\255\255\255\255\
\255\255\026\001\046\001\047\001\048\001\255\255\031\001\003\001\
\255\255\034\001\255\255\036\001\255\255\038\001\001\001\002\001\
\041\001\255\255\005\001\255\255\255\255\046\001\047\001\048\001\
\020\001\255\255\003\001\255\255\255\255\255\255\026\001\255\255\
\001\001\002\001\255\255\031\001\005\001\255\255\034\001\255\255\
\027\001\028\001\038\001\020\001\255\255\003\001\255\255\255\255\
\035\001\026\001\046\001\047\001\048\001\255\255\031\001\255\255\
\255\255\034\001\027\001\028\001\255\255\038\001\020\001\255\255\
\255\255\255\255\035\001\255\255\026\001\046\001\047\001\048\001\
\255\255\031\001\001\001\002\001\034\001\255\255\005\001\255\255\
\038\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\046\001\047\001\048\001\018\001\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\027\001\028\001\029\001\255\255\
\255\255\001\001\002\001\255\255\035\001\005\001\001\001\002\001\
\255\255\255\255\005\001\042\001\043\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\027\001\028\001\024\001\255\255\255\255\
\027\001\028\001\029\001\035\001\255\255\024\001\025\001\255\255\
\035\001\255\255\001\001\002\001\255\255\255\255\005\001\042\001\
\043\001\008\001\009\001\010\001\011\001\012\001\013\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\027\001\028\001\029\001\255\255\
\003\001\255\255\255\255\255\255\035\001\008\001\009\001\010\001\
\011\001\012\001\013\001\042\001\043\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\024\001\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\024\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\024\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\042\001\043\001\008\001\009\001\010\001\011\001\012\001\013\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\024\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\042\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\024\001\042\001\043\001\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\042\001\043\001\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\008\001\009\001\
\010\001\011\001\012\001\013\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\024\001\042\001\
\043\001\255\255\255\255\255\255\024\001\008\001\009\001\010\001\
\011\001\012\001\013\001\001\001\002\001\255\255\255\255\005\001\
\042\001\043\001\255\255\255\255\255\255\024\001\042\001\043\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\042\001\
\043\001\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\043\001"

let yynames_const = "\
  Leol\000\
  Leof\000\
  Lpipe\000\
  Lcolon\000\
  Lsemi\000\
  Lquestion\000\
  Lasgn\000\
  Lmod\000\
  Lplus\000\
  Lminus\000\
  Lmul\000\
  Ldiv\000\
  Lxor\000\
  Llt\000\
  Lgt\000\
  Lleq\000\
  Lgeq\000\
  Leq\000\
  Lneq\000\
  Llparen\000\
  Lrparen\000\
  Land\000\
  Lor\000\
  Ldot2\000\
  Lcomma\000\
  Llcurly\000\
  Lrcurly\000\
  Lrem\000\
  Lwrite\000\
  Lfollow\000\
  Lbackslash\000\
  Llbracket\000\
  Lrbracket\000\
  Ldo\000\
  Lend\000\
  Lfor\000\
  Lin\000\
  Lif\000\
  Lthen\000\
  Lelse\000\
  Lreturn\000\
  Lhead\000\
  Ltail\000\
  Lbyte\000\
  Ltint\000\
  Lnew\000\
  "

let yynames_block = "\
  Lint\000\
  Lident\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_terms) in
    Obj.repr(
# 40 "leo_parser.mly"
                                     ( log "program"; _1 )
# 564 "leo_parser.ml"
               : Leo.code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 43 "leo_parser.mly"
                      ( log "stmt"; [_1] )
# 571 "leo_parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'terms) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 44 "leo_parser.mly"
                                 ( log "more stmt"; _1 @ [_3] )
# 580 "leo_parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'params_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "leo_parser.mly"
                                           ( log "Def"; Leo.Def(_1, _2, _4) )
# 589 "leo_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "leo_parser.mly"
                            ( log "Write"; Leo.Write(_1, _3) )
# 597 "leo_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'name_seq_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'opt_terms) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_terms) in
    Obj.repr(
# 49 "leo_parser.mly"
                                                           (  log "For"; Leo.For(_2, _4) )
# 607 "leo_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "leo_parser.mly"
                      ( log "Ret"; Leo.Ret _2 )
# 614 "leo_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "leo_parser.mly"
                     ( log "Expr_as_stmt"; Leo.Expr _1 )
# 621 "leo_parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "leo_parser.mly"
                ( [] )
# 627 "leo_parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'params) in
    Obj.repr(
# 55 "leo_parser.mly"
                                ( _2 )
# 634 "leo_parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "leo_parser.mly"
                       ( [_1] )
# 641 "leo_parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 59 "leo_parser.mly"
                              ( _1 :: _3 )
# 649 "leo_parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "leo_parser.mly"
                       ( log "LVar"; Leo.LVar _1 )
# 656 "leo_parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 63 "leo_parser.mly"
                                                ( log "LArr"; Leo.LArr(_1, _3) )
# 664 "leo_parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'seq) in
    Obj.repr(
# 64 "leo_parser.mly"
                                        ( log "LSubArr"; Leo.LSubArr(_1, _3) )
# 672 "leo_parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_seq) in
    Obj.repr(
# 67 "leo_parser.mly"
                         ( [_1] )
# 679 "leo_parser.ml"
               : 'name_seq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name_seq_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name_seq) in
    Obj.repr(
# 68 "leo_parser.mly"
                                              ( _1 @ [ _3 ] )
# 687 "leo_parser.ml"
               : 'name_seq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq) in
    Obj.repr(
# 71 "leo_parser.mly"
                               ( log "Name_seq"; (_1, _3) )
# 695 "leo_parser.ml"
               : 'name_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "leo_parser.mly"
                       ( log "SVal"; Leo.SVal _1 )
# 702 "leo_parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "leo_parser.mly"
                         ( log "SRange"; Leo.SRange(_1, _3) )
# 710 "leo_parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 78 "leo_parser.mly"
                       ( log "Int"; Leo.Val _1 )
# 717 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "leo_parser.mly"
                  ( log "Id"; Leo.Var _1 )
# 724 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'then_) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'if_tail) in
    Obj.repr(
# 80 "leo_parser.mly"
                                            ( log "If"; Leo.If(_2, _4, _5) )
# 734 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'opt_terms) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_terms) in
    Obj.repr(
# 81 "leo_parser.mly"
                                              ( log "Comp"; Leo.Comp _3 )
# 743 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'opt_terms) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_terms) in
    Obj.repr(
# 82 "leo_parser.mly"
                                                     ( log "Comp"; Leo.Comp _3 )
# 752 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 83 "leo_parser.mly"
                                     ( if _1="print" then ( log "Print"; Leo.Comp [Leo.Print(List.hd _3)] ) 
																							else ( log "Call"; Leo.Call(_1, _3) ) )
# 761 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "leo_parser.mly"
                                         ( log "Arr"; Leo.Arr(_1, _3) )
# 769 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'seq) in
    Obj.repr(
# 86 "leo_parser.mly"
                                        ( log "SubArr"; Leo.SubArr(_1, _3) )
# 777 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "leo_parser.mly"
                          ( log "Length"; Leo.Length _2 )
# 784 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "leo_parser.mly"
                    ( log "Head"; Leo.Head _1 )
# 791 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "leo_parser.mly"
                    ( log "Tail"; Leo.Tail _1 )
# 798 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 90 "leo_parser.mly"
               ( log "Arith"; _1 )
# 805 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'atype) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "leo_parser.mly"
                                             ( log "New"; Leo.New(_2, _4) )
# 813 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "leo_parser.mly"
                                        ( log "Lambda"; Leo.Lambda(_2, _4) )
# 821 "leo_parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "leo_parser.mly"
                                  ( Leo.Arith(Add, _1, _3) )
# 829 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "leo_parser.mly"
                            ( Leo.Arith(Sub, _1, _3) )
# 837 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "leo_parser.mly"
                          ( Leo.Arith(Mul, _1, _3) )
# 845 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "leo_parser.mly"
                          ( Leo.Arith(Div, _1, _3) )
# 853 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "leo_parser.mly"
                          ( Leo.Arith(Mod, _1, _3) )
# 861 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "leo_parser.mly"
                         ( Leo.Arith(Xor, _1, _3) )
# 869 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "leo_parser.mly"
                         ( log "Range_as_expr"; Leo.Seq(Leo.SRange(_1, _3)) )
# 877 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arith) in
    Obj.repr(
# 102 "leo_parser.mly"
                                 (  log "expr_in_parens"; _2 )
# 884 "leo_parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "leo_parser.mly"
                                ( Leo.Less(_1, _3) )
# 892 "leo_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "leo_parser.mly"
                         ( Leo.Less(_3, _1) )
# 900 "leo_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "leo_parser.mly"
                         ( Leo.Eq(_1, _3) )
# 908 "leo_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "leo_parser.mly"
                          ( Leo.Not(Leo.Eq(_1, _3)) )
# 916 "leo_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 109 "leo_parser.mly"
                                  ( Leo.And(_1, _3) )
# 924 "leo_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 110 "leo_parser.mly"
                                 ( Leo.Or(_1, _3) )
# 932 "leo_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "leo_parser.mly"
                 ( log "empty_args"; [] )
# 938 "leo_parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "leo_parser.mly"
                     ( log "expr_as_Arg"; [ _1 ] )
# 945 "leo_parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 115 "leo_parser.mly"
                          ( log "More arg"; _1 :: _3 )
# 953 "leo_parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "leo_parser.mly"
                      ( )
# 959 "leo_parser.ml"
               : 'then_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eol) in
    Obj.repr(
# 119 "leo_parser.mly"
                    ( )
# 966 "leo_parser.ml"
               : 'then_))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "leo_parser.mly"
                ( None )
# 972 "leo_parser.ml"
               : 'if_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "leo_parser.mly"
                           ( Some _2 )
# 979 "leo_parser.ml"
               : 'if_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "leo_parser.mly"
                      ( Leo.AByte )
# 985 "leo_parser.ml"
               : 'atype))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "leo_parser.mly"
                      ( Leo.AInt )
# 991 "leo_parser.ml"
               : 'atype))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "leo_parser.mly"
                      ( )
# 997 "leo_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eol) in
    Obj.repr(
# 131 "leo_parser.mly"
                    ( )
# 1004 "leo_parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "leo_parser.mly"
                     ( )
# 1010 "leo_parser.ml"
               : 'eol))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "leo_parser.mly"
                   ( )
# 1016 "leo_parser.ml"
               : 'eol))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 138 "leo_parser.mly"
                     ( )
# 1023 "leo_parser.ml"
               : 'terms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'terms) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 139 "leo_parser.mly"
                           ( )
# 1031 "leo_parser.ml"
               : 'terms))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "leo_parser.mly"
                           ( )
# 1037 "leo_parser.ml"
               : 'opt_terms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'terms) in
    Obj.repr(
# 143 "leo_parser.mly"
               ( )
# 1044 "leo_parser.ml"
               : 'opt_terms))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Leo.code)
;;
